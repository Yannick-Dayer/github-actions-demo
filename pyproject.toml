# SPDX-FileCopyrightText: Copyright Â© Idiap Research Institute <contact@idiap.ch>
#
# SPDX-FileContributor: Yannick Dayer <yannick.dayer@idiap.ch>
#
# SPDX-License-Identifier: MIT

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ydayer-actions-demo"
version = "0.1.0"
requires-python = ">=3.11"
description = "Configuration Support for Python Packages and CLIs"
readme = "README.md"
license = "MIT"
authors = [{ name = "Yannick Dayer", email = "yannick.dayer@idiap.ch" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Programming Language :: Python :: 3",
]
dependencies = ["click>=8"]

[project.urls]
documentation = "https://clapper.readthedocs.io/en/latest/"
homepage = "https://pypi.org/project/clapper"
repository = "https://github.com/Yannick-Dayer/github-actions-demo"
changelog = "https://github.com/Yannick-Dayer/github-actions-demo/releases"

[project.optional-dependencies]
qa = ["pre-commit", "reuse", "ruff"]
doc = [
  "sphinx",
  "furo",
  "sphinx-autodoc-typehints",
  "sphinxcontrib-programoutput",
  "auto-intersphinx",
  "sphinx-copybutton",
  "sphinx-inline-tabs",
]
test = ["pytest", "pytest-cov"]
dev = ["pdbpp", "uv", "ydayer-actions-demo[doc,qa,test]"]

[project.scripts]
hello = "dummy_pkg.cli:hello"

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-arm64"]

[tool.pixi.system-requirements]
linux = "4.19.0"

[tool.pixi.pypi-dependencies]
ydayer-actions-demo = { path = ".", editable = true }

[tool.pixi.feature.py311.dependencies]
python = "~=3.11.0"

[tool.pixi.feature.py312.dependencies]
python = "~=3.12.0"

[tool.pixi.feature.py313.dependencies]
python = "~=3.13.0"

[tool.pixi.feature.qa.tasks]
qa-install = "pre-commit install"
qa = "pre-commit run --all-files"
qa-ci = "pre-commit run --all-files --show-diff-on-failure --verbose"

[tool.pixi.feature.doc.tasks]
doc-clean = "rm -rf doc/api && rm -rf html"
doc = "sphinx-build -aEW doc html"
doctest = "sphinx-build -aEb doctest doc html/doctest"

[tool.pixi.feature.test.tasks]
test = "pytest -sv tests/"
test-ci = "pytest -sv --cov-branch tests/"

[tool.pixi.environments]
default = { features = ["qa", "doc", "test", "py312"], solve-group = "default" }
qa = { features = ["qa", "py312"], solve-group = "default" }
test = { features = ["test", "py312"], solve-group = "default" }
doc = { features = ["doc", "py312"], solve-group = "default" }
dev = { features = ["dev", "qa", "doc", "test", "py312"], solve-group = "default" }

py311 = { features = ["qa", "doc", "test", "py311"], solve-group = "py311" }
test-py311 = { features = ["test", "py311"], solve-group = "py311" }

py313 = { features = ["qa", "doc", "test", "py313"], solve-group = "py313" }
test-py313 = { features = ["test", "py313"], solve-group = "py313" }

[tool.hatch.build.targets.sdist]
include = [
  "src/**/*.py",
  "tests/**/*.py",
  "tests/**/*.cfg",
  "doc/**/*.rst",
  "doc/**/*.txt",
  "doc/**/*.py",
  "LICENSES/*.txt",
]

[tool.hatch.build.targets.wheel]
packages = ["src/dummy_pkg"]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
  "A",   # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
  "COM", # https://docs.astral.sh/ruff/rules/#flake8-commas-com
  "D",   # https://docs.astral.sh/ruff/rules/#pydocstyle-d
  "E",   # https://docs.astral.sh/ruff/rules/#error-e
  "F",   # https://docs.astral.sh/ruff/rules/#pyflakes-f
  "I",   # https://docs.astral.sh/ruff/rules/#isort-i
  "ISC", # https://docs.astral.sh/ruff/rules/#flake8-implicit-str-concat-isc
  "LOG", # https://docs.astral.sh/ruff/rules/#flake8-logging-log
  "N",   # https://docs.astral.sh/ruff/rules/#pep8-naming-n
  "PTH", # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
  "Q",   # https://docs.astral.sh/ruff/rules/#flake8-quotes-q
  "RET", # https://docs.astral.sh/ruff/rules/#flake8-return-ret
  "SLF", # https://docs.astral.sh/ruff/rules/#flake8-self-slf
  "T10", # https://docs.astral.sh/ruff/rules/#flake8-debugger-t10
  "T20", # https://docs.astral.sh/ruff/rules/#flake8-print-t20
  "UP",  # https://docs.astral.sh/ruff/rules/#pyupgrade-up
  "W",   # https://docs.astral.sh/ruff/rules/#warning-w
  #"G",   # https://docs.astral.sh/ruff/rules/#flake8-logging-format-g
  #"ICN", # https://docs.astral.sh/ruff/rules/#flake8-import-conventions-icn
]
ignore = [
  "COM812", # https://docs.astral.sh/ruff/rules/missing-trailing-comma/
  "D100",   # https://docs.astral.sh/ruff/rules/undocumented-public-module/
  "D102",   # https://docs.astral.sh/ruff/rules/undocumented-public-method/
  "D104",   # https://docs.astral.sh/ruff/rules/undocumented-public-package/
  "D105",   # https://docs.astral.sh/ruff/rules/undocumented-magic-method/
  "D107",   # https://docs.astral.sh/ruff/rules/undocumented-public-init/
  "D203",   # https://docs.astral.sh/ruff/rules/one-blank-line-before-class/
  "D202",   # https://docs.astral.sh/ruff/rules/no-blank-line-after-function/
  "D205",   # https://docs.astral.sh/ruff/rules/blank-line-after-summary/
  "D212",   # https://docs.astral.sh/ruff/rules/multi-line-summary-first-line/
  "D213",   # https://docs.astral.sh/ruff/rules/multi-line-summary-second-line/
  "E302",   # https://docs.astral.sh/ruff/rules/blank-lines-top-level/
  "E402",   # https://docs.astral.sh/ruff/rules/module-import-not-at-top-of-file/
  "E501",   # https://docs.astral.sh/ruff/rules/line-too-long/
  "ISC001", # https://docs.astral.sh/ruff/rules/single-line-implicit-string-concatenation/
]

[tool.ruff.lint.isort]
# Use a single line between direct and from import.
lines-between-types = 1

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["D", "E501"]
"doc/conf.py" = ["D"]

[tool.pytest.ini_options]
addopts = ["--cov=clapper", "--cov-report=term-missing", "--import-mode=append"]

[tool.coverage.run]
relative_files = true
